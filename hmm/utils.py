from Bio import SeqIO, AlignIO
import numpy as np

AA_POSITIONS = {
    '-': 0,
    'A': 1,
    'C': 2,
    'D': 3,
    'E': 4,
    'F': 5,
    'G': 6,
    'H': 7,
    'I': 8,
    'K': 9,
    'L': 10,
    'M': 11,
    'N': 12,
    'P': 13,
    'Q': 14,
    'R': 15,
    'S': 16,
    'T': 17,
    'V': 18,
    'W': 19,
    'Y': 20
}
DOMAIN_NAMES = ['IPR032239', 'IPR032240', 'IPR033114', 'IPR003615', 'IPR032237'] # Cas9


def read_sequences():
    """
    read the whole sequence and domain indices, generated the domain sequence files for blasting
    :return: list of protein names and sequences
    """
    proteins = []
    sequences = []
    domains_list = []

    with open('data/full_sequence_Cas5/protein_list', mode='r') as f:
        for line in f.readlines():
            if len(line.strip()) > 0:
                proteins.append(line.strip())

    for protein in proteins:
        sequence = SeqIO.read('data/full_sequence_Cas5/{}.fasta'.format(protein), 'fasta')
        sequences.append(sequence)
        domains = []
        with open('data/full_sequence_Cas5/{}.domains'.format(protein)) as f:
            for line in f.readlines():
                domains.append(line.strip().split(' '))
        domains_list.append(domains)
    # domains_map = {'IPR032239': [], 'IPR032240': [], 'IPR033114': [], 'IPR003615': [], 'IPR032237': []}  # Cas9
    domains_map = {'IPR013422': []}  # Cas5
    for i in range(len(proteins)):
        for j in range(len(domains_list[i])):
            domains = domains_list[i][j]
            start, end = int(domains[1]), int(domains[2])
            domains_map[domains[0]].append(sequences[i][start - 1: end - 1])

    for k, v in domains_map.items():
        print len(v)
        SeqIO.write(v, 'data/domains_Cas5/{}.fasta'.format(k), 'fasta')

    return proteins, sequences

read_sequences()

def _get_amino_acid_count(sequences):
    """
    count the amino acids in the sequences
    :param sequences: sequences of aa
    :return: an list of counts, position corresponding to aa in the constant map
    """
    count = [0 for _ in range(21)]
    for sequence in sequences:
        for c in sequence:
            count[AA_POSITIONS[c]] += 1
    return count


def read_alignments():
    """
    Alignment generated by commands like
    ./clustal-omega-1.2.3-macosx -i data/domains_Cas9/IPR003615.fasta -o data/domains_Cas9/align_IPR003615.fasta
    :return:
    """
    alignment_sequences = {'IPR032239': [], 'IPR032240': [], 'IPR033114': [], 'IPR003615': [], 'IPR032237': []}  # Cas9
    alignment_sequences = {'IPR013422': []}  # Cas9
    for domains_name in DOMAIN_NAMES:
        alignment_sequences[domains_name] = AlignIO.read('data/domains_Cas9/align_{}.fasta'.format(domains_name), 'fasta')
    return alignment_sequences


def get_background_emission(sequences):
    counts = _get_amino_acid_count(sequences)
    sum = np.sum(counts)
    return [float(count) / float(sum) for count in counts]


def get_foreground_emissions(alignment_sequences):
    n_columns = len(alignment_sequences[0])
    emissions = [[] for _ in range(n_columns)]
    for i in range(n_columns):
        aa_count = _get_amino_acid_count(alignment_sequences[:, i])
        assert np.sum(aa_count) == 21
        emissions[i] = [float(count) / 21.0 for count in aa_count]
    return emissions


